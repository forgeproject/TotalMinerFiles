[Blueprint:] Customize an items crafting blueprint.
[CaveIn:] Starts a cave in (earthquake).
[CCTV:] Views the game world from a block position.
[Clan:] Adds or removes the player from a clan.
[Commit:] Forces a graphics refresh.
[Context:] Set the context for some command parameters.
[CopyBlock:] Copies a block from one location to another.
[CopyRegion:] Copies all the blocks from one region to another.
[Equip:] Forces the player to equip an item if they have it in their inventory.
[Exit:] Exit the script immediately.
[Explosion:] Creates an explosion.
[Fog:] Creates a fog weather effect.
[Hail:] Creates a hail weather effect.
[Health:] Manipulate a players current Health points.
[History:] Manipulates historical records.
[HUDBar:] Add/remove custom HUD status bars, driven by history values.
[HUDCounter:] Add/remove custom HUD counters, driven by history values.
[HUDShape:] Add/remove custom shapes to the HUD.
[HUDText:] Add/remove custom text element to the HUD.
[Inventory:] Manipulates block and entity inventories.
[Input:] Prompt the player to enter a number.
[Item:] Customize an items properties.
[Kick:] Kicks a player from the multiplayer session.
[Loop:] Restarts the script from the top.
[Marker:] Manipulates map markers.
[Menu:] Prompt gamer with a multiple choice menu.
[MessageBox:] Prompt gamer with a multiple choice message box.
[MobHealth:] Manipulate mob current Health points.
[MobSpawn:] Spawns a mob.
[MobState:] Set the state of all mobs in a region.
[MoveBlock:] Moves a block from one location to another.
[MoveRegion:] Moves all blocks from one region to another.
[Notify:] Creates a notification message.
[OpenBlock:] Opens the standard interface screen for container blocks.
[Particle:] Emit an individual particle.
[ParticleEmitter:] Creates a particle emitter that emits particles at a specified frequency over a specified length of time.
[Paste:] Pastes a component.
[Permission:] Manipulates player permissions.
[Pickup:] Manipulates item pickups.
[ReplaceRegion:] Replaces all occurrences of a block in a region with another block.
[Rain:] Creates a rain weather effect.
[Script:] Executes another script.
[SetBlock:] Sets the block id at a location.
[SetBlockScript:] Assigns a script to blocks that can execute scripts.
[SetEventScript:] Assigns a script to be executed on certain game events.
[SetNameplate:] Sets player or mob nameplate settings.
[SetPower:] Sets the power state at a location.
[SetReach:] Sets the distance that players can reach (target) blocks.
[SetRegion:] Sets all the block ids in a region.
[SetSphere:] Creates a sphere of blocks.
[SetSwitch:] Manipulates switches and buttons.
[SetText:] Sets the text of blocks that have text properties.
[SetTexture:] Sets the texture for a block that has multiple texture capability. Also used to set decals for blocks that support decals.
[Skill:] Sets a players skill level.
[SkillAddXP:] Add XP to a players skill level.
[SkyColor:] Customize sky color.
[Sound:] Plays a sound.
[Teleport:] Teleports entities.
[TintColor:] Applies a multiplicative tint color to the texture pack.
[Unequip:] Forces the player to unequip items.
[Var:] Declare variables and assign values.
[Wait:] Pauses the script execution for a time.
[Waypoint:] Manipulates player waypoints.
[Zone:] Manipulates zones.

Conditionals:

[If:] Starts a conditional If, Then, Elseif, Else, Endif block
[CanEquip:] Queries if the player can use an item.
[HasAction:] Queries if the player has performed an action.
[HasHistory:] Queries historical records.
[HasInventory:] Queries block or entity inventories.
[HasMarker:] Queries map markers.
[HasPermission:] Queries player permissions.
[HasPlayer:] Queries player properties.
[HasSkill:] Queries player skill levels.
[HasStatBonus:] Queries player item stat bonuses.
[Intersect:] Tests for an intersection with players, mobs or both.
[IsAvatar:] Queries what skin the player is currently wearing.
[IsBlock:] Queries the block id at a location.
[IsBlockDeliveringPower:] Queries if a block is delivering power (to adjacent blocks).
[IsBlockEdited:] Queries if the block at a location has been edited.
[IsBlockLightSource:] Queries if the block at a location is a light source (emits light).
[IsBlockOpen:] Queries if the block at a location is being accessed by a player.
[IsBlockOre:] Queries if the block at a location is an ore block.
[IsBlockPassable:] Queries if a player can pass through the block at a location.
[IsBlockReceivingPower:] Queries if a block is receiving power from an adjacent power emitting block. This command has replaced the old IsPowered command.
[IsBlockResistance:] Queries a blocks resistance (hardness) at a location.
[IsBlockSolid:] Queries if the block at a location is a solid block (players cannot see through it or see through parts of it).
[IsBlockTexture:] Queries the block texture id at a location.
[IsClan:] Queries if the player is a member of a clan.
[IsClock:] Queries the current game hour (24 hour clock).
[IsCombat:] Queries if combat is enabled.
[IsDayTime:] Queries whether or not it is currently day time.
[IsDistance:] Queries the distance between the player and a location.
[IsEquipped:] Queries if the player has the item equipped.
[IsFiniteResources:] Queries if Finite Resources is enabled.
[IsGamerCount:] Queries the number of gamers in the session.
[IsInZone:] Queries if the player is in a zone.
[IsLight:] Queries the quantity of light at a location.
[IsLit:] Queries if a location is touched by light, either from itself or an adjacent location.
[IsMobCount:] Queries the number of mobs in an area.
[IsNameplate:] Queries the players nameplate setting.
[IsNightTime:] Queries whether or not it is currently night time.
[IsPowered:] Queries if a block is powered.
[IsSkills:] Queries is the skill system is enabled.
[IsRandom:] Returns a random number.
[IsTime:] Queries the current game or player time.
[IsVar:] Queries the value of a variable.
[Then:] Marks which commands are executed if the queries are true.
[Elseif:] Allows multiple query branches.
[Else:] Marks which commands are executed if the queries are false.
[Endif:] Ends an If, Then, Else, Elseif block.


Global Scripts:

Global scripts are scripts that are accessible to all of your worlds.
To make a script global, simply prefix its name with Global\
If you host a multiplayer world, your global scripts are accessible.
If you join a multiplayer world (not host), your global scripts are not accessible.
If you share a world, only the global scripts used in that world are included in the share.


Common Parameter Definitions:
All commands and parameters are case insensitive, with only a small number of exceptions. The exceptions are documented with the command documentation.

If you see multiple parameters defined, separated by a vertical bar (|), this means only one of the parameters should be used, it is your choice which. e.g. [on|off|toggle] means you can use either [on], [off] or [toggle], but only one. [true|false] means you can use either [true] or [false], but not both. Note: Some commands do support multiple choices, such as the Notify command. e.g. notify [text] [clan|admin] will notify both clan members and admins.


Open Script option:
If you highlight a command in your script that specifies another script, e.g. the Script command or the SetEventScript command, pressing the Start button will open the target script in a new editor window.


Text Substitution:
[text]
Any text parameter supports text substitution. Text substitution is when certain key words surrounded by [square brackets] are substituted with a value.

[gamertag] - the players gamertag is substituted.
[clan] - the players clan name is substituted.
[history:key] - the value of the player history identified by key is substituted.
[syshistory:key] - the value of the system history identified by key is substituted.
[clanhistory:key] - the value of the players clan history identified by key is substituted.

e.g. If the players gamertag is 'Baldy' and the players clan is 'Dragons' and the player has a value of 5 for their 'rank' history, then the following text:

[Hello [gamertag] of Clan [clan]. Your Rank is [history:rank]. Good luck!]
will be substituted as:
[Hello Baldy of Clan Dragons. Your Rank is 5. Good luck!]


Coordinates:
[x,y,z]
This parameter defines that a three dimensional coordinate is expected. This parameter has three components, separated by commas. Each component must be either a positive or negative whole number. Usually it is the coordinate (location) of a block in the world, but it can also be used to define relative coordinates, which are coordinates relative to another coordinate.

x: The x coordinate is for the west/east axis.
y: The y coordinate is for the up/down axis.
z: The z coordinate is for the north/south axis.

Relative coordinates are supported.
[rel:x, y, z]

Example:
[rel:-10, 5, 20] - The final coordinate will be this coordinate + the coordinate of the script block that the script was executed from, otherwise if the script was run manually from the menu then it will be an absolute coordinate (+ [0,0,0].

If the script block is located at [30, 10, 40], then the final coordinate of [rel:-10, 5, 20] will be [20, 15, 60]

Player relative coordinates are supported.

[prel:x, y, z] - Relative to the players position.
[vrel:f, y, r] - Relative to the players viewpoint. f = forward, r = right.
[hvrel:f, y, r] - Relative to the players horizontal viewpoint (Up/down view direction is ignored). f = forward, r = right.

Example:
[vrel: 10, 2, 3] - 10 Blocks forward of the player + 2 blocks up + 3 blocks to the right.
[vrel: -5, -2, -3] - 5 Blocks behind the player + 2 blocks down + 3 blocks to the left.

Cursor relative coordinates are supported.
[crel:x, y, z] - Relative to the block the player is looking at (with highlight frame).

Target and Killer relative coordinates are supported.
[trel:x, y, z] - Relative to the targets position.
[tvrel:f, y, r] - Relative to the targets viewpoint.
[krel:x, y, z] - Relative to the killers position.
[kvrel:f, y, r] - Relative to the killers viewpoint.

*Note Killer relative coords are only valid when the script is executed via the PlayerDeath event.


2D Coordinates (Surface coordinates):

[x,z]
This parameter defines that a two dimensional coordinate is expected. This parameter has two components, separated by commas. Each component must be either a positive or negative whole number. Usually it is the coordinate (location) of a block on the world surface. With these coordinates, the y component not required and usually the surface height at x,z is used instead.

x: The x coordinate is for the west/east axis.
z: The z coordinate is for the north/south axis.

Relative coordinates are supported.


Other Parameters:

[block]
This parameter defines that the name of a block is expected.

[item]
This parameter defines that the name of an item is expected. In most cases, block names are also valid.

[compare]
This parameter specifies that a comparison operator is expected. Valid comparison operators are:
[=] - Equal To
[!=] - Not Equal To
[<>] - Not Equal To
[>] - Greater Than
[>=] - Greater Than or Equal To
[<] - Less Than
[<=] - Less Than or Equal To
[mod] - Modulus

[qty|count]
This parameter specifies that a numerical quantity is expected.

[count|history]
This parameter specifies that a numerical quantity is expected. History values can also be used.
e.g.
[5] specifies the fixed number 5.
[history:key] - the value of the player history identified by key is used.
[syshistory:key] - the value of the system history identified by key is used.
[clanhistory:key] - the value of the players clan history identified by key is used.


Fixed Value Parameter Definitions:

Fixed value parameters are not substituted with a user defined value, their value is always the same, and they specify a certain action or target for the script command.

[player]
This parameter specifies that the command is targeted at the player who activated the script.

[clan]
This parameter specifies that the command is targeted at all clan members of the player who activated the script.

[admin]
This parameter specifies that the command is targeted at all admins.

[delete]
This parameter specifies that the data the command is targeting is to be deleted.

[true|false]
[on|off|toggle]

[n|s|e|w]
This parameter specifies a direction. n = north, s = south, e = east, w = west.


Multi-line support:

Clicking Left Stick toggles multi-line selection on and off. Multiple selected lines are highlighted in yellow. The clipboard supports multiple lines so if you have multiple lines selected and you press Copy, all the lines are copied to the clipboard, and when you press Paste, all the lines from the clipboard will be pasted.

Also if you delete a line while multiple lines are selected, all selected lines will be deleted.


Pickup: Manipulates item pickups.

Pickup [clear]
Pickup [x,y,z] [item] [qty]

[clear] - Clear all pickups in the world.

[x,y,z] - The coordinate in the world where the pickup is to spawn.

[item] - The name of the item to spawn.

[qty] - The quantity of the item in the pickup. This parameter may be ommitted, and a value of one (1) will be used.

Examples:

Pickup [100,200,150] [WoodSword]
Spawns a pickup at location 100,200,150 for 1 WoodSword.

Pickup [300,150,250] [Grass] [50]
Spawns a pickup at location 300,150,250 for 50 Grass blocks.

Pickup [clear]
Clears all pickups in the world.

CaveIn: Starts a cave in (earthquake). Only one Cave In can exist in a world at the same time. If a CaveIn command is executed and there is already another cave in in progress, the command is ignored.

CaveIn [x,y,z] [seed]

[x,y,z] - The coordinate in the world of the center of the cave in.

[seed] - The seed for the random number generator. This value can be any number. This parameter may be ommitted, and a value of zero (0) will be used.

Examples:

CaveIn [200,100,300]
Starts a cave in at location 200,100,300, using zero (0) as the random seed.

CaveIn [300,120,200] [2001]
Starts a Cave In at location 300,120,200, using 2001 as the random seed.

CCTV: Views the game world from a block position.

CCTV [admin] [x,y,z]
CCTV [admin] [x,y,z] [x,y,z|n|s|e|w|track]
CCTV [admin] [x,y,z] [x,y,z|n|s|e|w|track]
CCTV [admin] [x,y,z] [x,y,z|n|s|e|w|track] [millisecs]
CCTV [admin] [x,y,z] [x,y,z|n|s|e|w|track] [millisecs] [swivelspeed]
CCTV [admin] [x,y,z] [x,y,z|n|s|e|w|track] [millisecs] [swivelspeed] [fov]

[admin] - Indicates this command should only be executed if the player has the admin permission. False if omitted.

[x,y,z] - The coordinate in the world of the block to view from.

[x,y,z|n|s|e|w|track] - Either the target block position to look at or the initial direction the player will be facing. n = north, s = south, e = east, w = west. Hybrid directions such as nw or sse are not valid. North is used if this parameter is omitted. There is also the option to specify [track] instead of a direction. If this option is used, the CCTV will track the player who activated the script. swivelspeed is ignored if tracking is used.

[millisecs] - The length of time the player will view from the CCTV. The player may exit manually before this time has passed by pressing the A button. If this parameter is omitted or has a value of zero, the player will view indefinitely, until they exit manually. This parameter cannot be omitted if you want to specify [swivelspeed].

[swivelspeed] - How fast the camera swivels when using the right stick. This value is a percentage (valid values between 0 and 100). 1% = slowest, 100% = fastest, 0% = swivel disabled. If this parameter is omitted, 0 is used (swivel is disabled). swivelspeed is ignore if the [track] option is used instead of a direction. This parameter cannot be omitted if you want to specify [fov].

[fov] - Field of View (zoom). This value is a percentage (valid values between 1 and 100). 1% = fully zoomed in, 100% = fully zoomed out. A value of 50% is used if this parameter is omitted.

Examples:

CCTV [10,20,30]
Player views the world from location 10,20,30, initially facing north. The player will stay in CCTV mode indefinitely, until they press the A button. Swivel is disabled. FOV is 50%.

CCTV [admin] [10,20,30]
Same as above except the command only works for admin players.

CCTV [admin] [10,20,30] [track]
Same as above except the CCTV will stay focused on the player (as they move around) who activated the script.

CCTV [10,20,30] [e]
Player views the world from location 10,20,30, initially facing east. The player will stay in CCTV mode indefinitely, until they press the A button. Swivel is disabled. FOV is 50%.

CCTV [10,20,30] [e] [5000]
Same as above except the player will automatically exit from the CCTV view after 5 seconds, if they have not already manually exited.  Swivel is disabled. FOV is 50%.

CCTV [10,20,30] [e] [5000] [10]
Same as above except the Swivel speed will be 10% (quite slow).

CCTV [10,20,30] [20,20,30] [5000] [10]
Same as above except the CCTV will look at the block position [20,20,30] instead of facing east.

CCTV [10,20,30] [e] [5000] [10] [15]
Same as above except the fov will be 15% (quite zoomed in).

CCTV [admin] [10,20,30] [n] [0] [100] [90]
Admin Player views the world from location 10,20,30, initially facing west. The player will stay in CCTV mode indefinitely, until they press the A button. Swivel is full speed. FOV is 90%.


While CCTV is active for a player, their HUD is turned off (like ghosting players). If swivel is not disabled, the player can zoom out/in using the left/right shoulder buttons.

Commit: Forces a graphics refresh.

Commit

There are no parameters for this command.

The Commit command is needed if you intend to create some kind of animation. If a script contains several commands that change blocks in the world, the graphics are only refreshed once the script has finished, this is because graphics refreshes are slow and if the game refreshed the graphics after every block is changed, the script could take a very long time to complete. It is also sometimes undesirable to have the graphics refresh after every block change, as you may wish for a wall of blocks etc to appear or disappear in a single moment.

One example where animation is required is for a script that raises or lowers a castle gate. For each level the gate raises/lowers, you want the graphics to refresh to create the animation of the gate raising/lowering. In this case you would insert a Commit command (and often a short Wait command) between each set of commands that raise/lower one level of the gate.

CopyBlock: Copies a block from a source location to a destination location. All data and settings attached to the source block are copied to the destination block.

CopyBlock [x,y,z] [x,y,z]

[x,y,z] - The 1st coordinate is the source location.
[x,y,z] - The 2nd coordinate is the destination location.

Examples:

CopyBlock [10,20,30] [110,120,130]
Copies the block and all its associated data at location 10,20.30 to location 110,120,130.

CopyRegion: Copies all the blocks from one source region to another destination region. All data and settings attached to the source blocks are copied to the destination blocks.

CopyRegion [x,y,z] [x,y,z] [x,y,z]

[x,y,z] - The 1st coordinate is the minimum bound of the source region.
[x,y,z] - The 2nd coordinate is the maximum bound of the source region.
[x,y,z] - The 3rd coordinate is the minimum bound of the destination region.

Examples:

CopyRegion [100,200,300] [150,250,350] [10,20,30]
Copies all the blocks and all their associated data from 100,200,300 / 150,250,350 to the location starting at 10,20,30. The final block at 150,250,350 will be copied to 60,70,80.

Fog [x,z] [radius] [duration] [intensity]
Fog [x,z] [radius] [duration] [intensity] [r,g,b]
Fog [x,z] [radius] [duration] [intensity] [r,g,b] [visibility]
Fog [x,z] [delete]

[x,z] - The surface coordinate for the center of the fog effect.

[radius] - The radius of the fog effect in blocks.

[duration] - The duration of the fog effect in seconds.

[intensity] - The strength or thickness of the fog. Valid values are 1 - 100, with 1 being the weakest and 100 the strongest.

[r,g,b] - The color of the fog in rgb format. r = red, g = green, b = blue. rgb are the 3 primary light colors and any color can be created with these 3 components. Possible values for each component are 0 - 255. This parameter may be omitted. If it is omitted, a random grayish color is used.

[visibility] - The distance in blocks from the players eye to the full strength of the fog. This parameter may be omitted. If it is omitted, a value of 40 is used.

[delete] - Deletes the Fog effect at [x,z]

Examples:

Fog [100,200] [100] [20] [50]
Creates a fog effect at surface coordinate 100,200, with a radius of 100 blocks. The effect lasts for 20 seconds and is half strength. A random grayish color is used. Visibility is 40 blocks.

Fog [300,800] [70] [120] [75] [200,200,200]
Creates a fog effect at surface coordinate 300,800, with a radius of 70 blocks. The effect lasts for 2 minutes and is 3/4 strength. The color of the fog is a whitish gray. Visibility is 40 blocks.

Fog [800,100] [20] [300] [100] [20,20,20] [3]
Creates a fog effect at surface coordinate 800,100, with a radius of 20 blocks. The effect lasts for 5 minutes and is full strength. The color of the fog is dark almost black. Visibility is 3 blocks, making it impossible for the player to see more than 3 blocks ahead of them.

Fog [300,800] [delete]
Deletes the current Fog effect at [300,800]

Hail: Hail: Creates a hail weather effect.

Hail [x,z] [radius] [duration] [intensity]
Hail [x,z] [radius] [duration] [intensity] [r,g,b]
Hail [x,z] [radius] [duration] [intensity] [r,g,b] [minsize,maxsize]
Hail [x,z] [delete]

[x,z] - The surface coordinate for the center of the hail storm.

[radius] - The radius of the hail storm in blocks.

[duration] - The duration of the hail storm in seconds.

[intensity] - The strength the hail storm. Valid values are 1 - 100, with 1 being the weakest and 100 the strongest.

[r,g,b] - The color of the hail stones in rgb format. r = red, g = green, b = blue. rgb are the 3 primary light colors and any color can be created with these 3 components. Possible values for each component are 0 - 255. This parameter may be omitted. If it is omitted, a random translucent whitish gray color is used.

[minsize,maxsize] - The size of the hail stones in centimeters. Valid values are 1 - 100, with 1 being 1cm and 100 being 1m (1 block). For each hail stone that falls, the game picks a random size between minsize and maxsize.

[delete] - Deletes the current Hail effect at [x,z]

Examples:

Hail [100,200] [100] [20] [50]
Creates a hail storm at surface coordinate 100,200, with a radius of 100 blocks. The storm lasts for 20 seconds and is half strength. A random whitish gray color is used.

Hail [300,800] [70] [120] [75] [200,200,200]
Creates a hail storm at surface coordinate 300,800, with a radius of 70 blocks. The effect lasts for 2 minutes and is 3/4 strength. The color of the hail stones is a light whitish gray.

Hail [800,100] [20] [300] [100] [20,20,20] [10,25]
Creates a hail storm at surface coordinate 800,100, with a radius of 20 blocks. The effect lasts for 5 minutes and is full strength. The color of the fog is dark almost black. The hail stones will range in size from 10 - 25 centimeters.

Hail [300,800] [delete]
Deletes the current Hail effect at [300,800]

History: Manipulates historical records. Historical records can be queried by the HasHistory command to determine if a record exists.

History [name] [+/-count|delete]
History [name] [player|clan] [+/-count|delete]

[name] - The name or label of the record. History names support folders which allows you to match your history names with script names, where appropriate.
[count] - Specify either an absolute value to set the history to that value, or specify a relative value to add/subtract that value from the history.
[delete] - Deletes the history record.
[player] - Indicates the record is for the player.
[clan] - Indicates the record is for the players clan.

Records are actually counters. So if the History command adds a record for the same name more than once, then a new record is not created, but the counter for the initial record increased. This allows scripts to query how many times a record has occured.

Examples:

History [ActionX] - Creates a new system history record called ActionX with a value of 1, or if the history already exists, it increments it by 1.
History [ActionX] [+1] - Identical to above.
History [ActionX] [3] - Creates a new system history record called ActionX with a value of 3, or if the history already exists, it sets its value to 3, regardless of what it was before.
History [ActionX] [delete] - Deletes the system history record called ActionX.
History [ActionX] [-5] - Subtracts 5 from the system history record.

History [ActionX] [player] - Creates a new player history record called ActionX with a value of 1, or if the history already exists, it increments it by 1.
History [ActionX] [player] [+1] - Identical to above.
History [ActionX] [player] [3] - Creates a new player history record called ActionX with a value of 3, or if the history already exists, it sets its value to 3, regardless of what it was before.
History [ActionX] [player] [delete] - Deletes the player history record called ActionX.
History [ActionX] [player] [-5] - Subtracts 5 from the player history record.
*Note: The player is whichever player activated the script.

History [ActionX] [clan] - Creates a new clan history record called ActionX with a value of 1, or if the history already exists, it increments it by 1.
History [ActionX] [clan] [+1] - Identical to above.
History [ActionX] [clan] [3] - Creates a new clan history record called ActionX with a value of 3, or if the history already exists, it sets its value to 3, regardless of what it was before.
History [ActionX] [clan] [delete] - Deletes the clan history record called ActionX.
History [ActionX] [clan] [-5] - Subtracts 5 from the clan history record.
*Note: The Clan is the clan of whichever player activated the script. If the player is not in a clan, the command does nothing.

var [foo] = [health] / [maxhealth] * [100]
History [HealthAsPercentage] [player] [foo]
Creates a variable that holds the value of the players current health as a percentage of its max health, and assigns that variable to the players history "HealthAsPercentage".

Inventory: Manipulates block and entity inventories.
Inventory [x,y,z] [clear]
Inventory [x,y,z] [clear] [item]
Inventory [x,y,z] [add|take] [item] [qty]
Inventory [player] [clear]
Inventory [player] [clear] [item]
Inventory [player] [add|take] [item] [qty]
Inventory [x,y,z] [player] [*move]
Inventory [x,y,z] [player] [*move] [item]
Inventory [x,y,z] [player] [*move] [item] [qty]
Inventory [player] [x,y,z] [*move]
Inventory [player] [x,y,z] [*move] [item]
Inventory [player] [x,y,z] [*move] [item] [qty]
Inventory [x,y,z] [x,y,z] [clear]
Inventory [x,y,z] [x,y,z] [clear] [item]
Inventory [x,y,z] [x,y,z] [*move] [item]
Inventory [x,y,z] [x,y,z] [copy] [item]
Inventory [x,y,z] [x,y,z] [add|take|copy|*move] [item] [qty]
Inventory [x,y,z] [x,y,z] [x,y,z] [copy|*move]

Marker: Manipulates markers on the overhead map.

Marker [name] [x,z]
Marker [name] [x,z] [admin]
Marker [name] [delete]

[name] - The name of the marker (displayed on the map).
[x,z] - The surface coordinate for the marker.
[admin] - Specifies the marker should only be visible to admins.
[delete] - Use this instead of [x,z] to delete an existing marker from the map.

Examples:

Marker [Town Square] [500,550]
Sets a marker at surface location 500,550 with the name "Town Square"

Marker [Admin HQ] [300,450] [admin]
Sets a marker at surface location 300,450 with the name "Admin HQ" which is only visible to admins.

Marker [Admin HQ] [delete]
Delete the marker named "Admin HQ" from the map.

Also see the Waypoint command for setting your waypoint on the overhead map.

MoveBlock: Moves a block from one location to another. All data and settings attached to block is moved with it. The source location is replaced with air.

MoveBlock [x,y,z] [x,y,z]

[x,y,z] - The 1st coordinate is the source location.
[x,y,z] - The 2nd coordinate is the destination location.

Examples:

MoveBlock [10,20,30] [110,120,130]
Moves the block and all its associated data at location 10,20.30 to location 110,120,130. After the move, location 10,20,30 will contain empty air.

MoveRegion: Moves all the blocks from one region to another region. All data and settings attached to the blocks are moved to the new region. After a block is moved, its original position is set to empty air.

MoveRegion [x,y,z] [x,y,z] [x,y,z]

[x,y,z] - The 1st coordinate is the minimum bound of the source region.
[x,y,z] - The 2nd coordinate is the maximum bound of the source region.
[x,y,z] - The 3rd coordinate is the minimum bound of the destination region.

Examples:

MoveRegion [100,200,300] [150,250,350] [10,20,30]
Moves all the blocks and all their associated data from 100,200,300 / 150,250,350 to the location starting at 10,20,30. The final block at 150,250,350 will be moved to 60,70,80.

Notify: Creates a notification message (pink messages at top left of screen).

Notify [message[gamertag]] [local|global|admin|clan]

[local] - only players on the same xbox see the message.
[global] - all players on the session see the message.

Supported from version 2.22
[admin] - all admins on the session see the message.
[clan] - all clan members see the message.

Paste: Pastes a component

Paste [pack:component] [x,y,z] [facing] [copytype]

Restrictions:
This command only works in Creative worlds.

Permission: Manipulates player permissions. Only the permissions of the player who activated the script are affected.

Permission [permission] [on|off]

[permission] - The permission to set. adventure, edit, creative, fly, map, chat, grief, save, admin.

[on|off] - Determines if the permission is to be set on or off.

Examples:

Permission [chat] [off] - sets the chat permission off.
Permission [edit] [on] - sets the edit permission on.

ReplaceRegion: Replaces all occurrences of a block in a region with another block.

ReplaceRegion [x,y,z] [x,y,z] [block1] [block2]

[x,y,z] - The 1st coordinate is the minimum bound of the replace region.
[x,y,z] - The 2nd coordinate is the maximum bound of the replace region.

[block1] - The Block to be replaced.
[block2] - The Block to replace with.

Restrictions:
This command only works in Creative worlds.

Examples:

ReplaceRegion [100,200,300] [150,250,350] [Limestone] [Marble]
Replaces all Limestone blocks within the 100,200,300 / 150,250,350 bound with Marble.

Rain: Creates a rain weather effect

Rain [x,z] [radius] [duration] [intensity]
Rain [x,z] [radius] [duration] [intensity] [r,g,b]

[x,z] - The surface coordinate for the center of the rain storm.

[radius] - The radius of the rain storm in blocks.

[duration] - The duration of the rain storm in seconds.

[intensity] - The strength the rain storm. Valid values are 1 - 100, with 1 being the weakest and 100 the strongest.

[r,g,b] - The color of the rain drops in rgb format. r = red, g = green, b = blue. rgb are the 3 primary light colors and any color can be created with these 3 components. Possible values for each component are 0 - 255. This parameter may be omitted. If it is omitted, a random translucent bluish gray color is used.

Examples:

Rain [100,200] [100] [20] [50]
Creates a rain storm at surface coordinate 100,200, with a radius of 100 blocks. The storm lasts for 20 seconds and is half strength. A random bluish gray color is used.

Rain [300,800] [70] [120] [75] [200,200,200]
Creates a rain storm at surface coordinate 300,800, with a radius of 70 blocks. The effect lasts for 2 minutes and is 3/4 strength. The color of the hail stones is a light whitish gray.

Script: Executes another script.

Script [name]
Script [name] [cancel] [all]
Script [name] [wait] [offset] [x,y,z] [vars:name,name,..] [out:name,name,..]

[name] - The name of the script to execute. Script names support logical folders, so insert forward slashes in your script names where required.

[cancel] - Indicates the script should be cancelled (removed from the execution queue). Only the instance for the current player will be cancelled. If you include the [all] parameter, all instances of the script for all players will be cancelled.

[wait] - Instructs the runtime to halt execution of the calling script until the called script has completed. This parameter is optional, and if omitted, the calling script will continue to execute without waiting on the called scipt. Note, this parameter is automatic if [out:..] is used.

[offset] - Optional offset coordinate. If a script is executed with an offset coordinate, then every coordinate encountered while executing the script has the offset added to it.

[vars:name,name,..] - Optional comma separated list of all variables you wish to pass to the script. These variables are passed by value, that is, if the called script modifies the variables, the calling scripts copies of the variables are unaffected.

[out:name,name,..] - Same as [vars:] except these variables are passed by reference, that is, if the called script modifies the variables, the calling scripts copies of the variables are also modified. This provides a mechanism for the called script to pass information back to its calling script. If this option is used, the [wait] parameter is automatic.


Examples:

Script [CloseDoor]
Executes the script CloseDoor

Script [Bank\PowerSafe] [offset] [10,11,12]
Executes the script Bank\PowerSafe and adds 10,11,12 to every coordinate encountered in the script.

Script [Magic\AirStrike] [vars:mana]
Executes the script Magic\AirStrike and passes the variable 'mana' (and its value) to the script.

Script [Magic\AirStrike] [vars:mana,focus,power]
Executes the script Magic\AirStrike and passes the variables 'mana', 'focus' and 'power' (and their values) to the script.

Script [Bank\PowerSafe] [offset] [10,11,12] [vars:keycode]
Executes the script Bank\PowerSafe and adds 10,11,12 to every coordinate encountered in the script. It also passes the variable 'keycode'.

Script [Bank\PowerSafe] [wait] [offset] [10,11,12] [vars:keycode]
Same as above except the calling script will wait for Bank\PowerSafe to complete before it continues execution.

Script [Bank\PowerSafe] [offset] [10,11,12] [vars:keycode] [out:valid]
Same as above except Bank\PowerSafe can modify the value of the variable called 'valid' and the valid variable in the calling script will be updated to match. Note the [wait] parameter is omitted, but automatic if the [out:] parameter is used.

Script [Bank\PowerSafe] [cancel]
Cancel the instance of the script Bank\PowerSafe for the current player.

Script [Bank\PowerSafe] [cancel] [all]
Cancel all instances of the script Bank\PowerSafe.

SetBlock: Sets the block at a location.

SetBlock [x,y,z]
SetBlock [x,y,z] [block]
SetBlock [x,y,z] [block] [aux]

[x,y,z] - The coordinate of the block to set.
[block] - The block to set. If this parameter is omitted, then [none] is used.
[aux] - Auxillary data.

Restrictions:
This command only works in Creative worlds.

Examples:

SetBlock [100,200,300] [Limestone]
Sets the block at location 100,200,300 to Limestone.

SetBlock [100,200,300]
Clears the block at location 100,200,300 (Sets it to None).

SetPower: Sets the power state of a block.

SetPower [x,y,z] [on|off]

[x,y,z] - The coordinate of the block.
[on|off] - The power state to set.

Examples:

SetPower [100,200,300] [on]
Sets the power state of the block at location 100,200,300 to on (powered).

SetPower [100,200,300] [off]
Sets the power state of the block at location 100,200,300 to off (unpowered).

SetRegion: Sets all the block ids in a region.

SetRegion [x,y,z] [x,y,z]
SetRegion [x,y,z] [x,y,z] [block]
SetRegion [x,y,z] [x,y,z] [block] [percent] [seed]

Restrictions:
This command only works in Creative worlds.

SetSwitch: Manipulates switches and buttons.

SetSwitch [x,y,z] [on|off|toggle]

[x,y,z] - The coordinate of the switch.
[on|off|toggle] - The state to set.

Examples:

SetSwitch [100,200,300] [on]
Sets the switch at location 100,200,300 to on. This will cause adjacent blocks to be powered.

SetSwitch [100,200,300] [off]
Sets the switch at location 100,200,300 to off. This will cause adjacent blocks to be unpowered (if they are not being powered by another power emitter block).

SetSwitch [100,200,300] [toggle]
Toggles the switch at location 100,200,300. If the switch was on before this command is executed, the switch will be set to off. If the switch was off before this command is executed, the switch will be set on.

MobSpawn: Spawns a mob.

MobSpawn [x,y,z] [mobtype]
MobSpawn [x,y,z] [mobtype] [kill=script]
MobSpawn [x,y,z] [mobtype] [loot=[x,y,z][item][item,count][item,count,dropchance]]
MobSpawn [x,y,z] [mobtype] [custom=[attack,50][strenth,70][defence,40]]
MobSpawn [x,y,z] [mobtype] [kill=script] [loot=[x,y,z][item][item,count][item,count,dropchance]]] [custom=[attack,50]]

[x,y,z] - The coordinate in the world where to spawn the mob.
[mobtype] - The type of mob to spawn. Goblin, Spider, Werewolf, Zombie, Dryad, Djinn, Orc, TrollChief, Diablo, Duck, Sheep, Alpaca, AyrshireCow, HighlandCow.
[kill=script] - The name of the script to execute when the mob is killed. This parameter is optional and is only executed if the mob is killed by combat.
[loot=[x,y,z][item][item,count][item,count,dropchance]] - Custom loot drop table.

Examples:

MobSpawn [100,200,300] [Goblin]
Spawns a Goblin at location 100,200,300.

MobSpawn [200,210,300] [Spider] [kill=SpiderKilled]
Spawns a Spider at location 200,210,300.
When this spider is killed, the SpiderKilled script is executed.

MobSpawn [200,210,300] [Spider] [custom=[attack,50][strength,80]]
Spawns a Spider at location 200,210,300.
This spider will have custom stats of attack level 50 and strenght level 80. All stats not specified will remain as default.

MobSpawn [300,220,400] [Werewolf] [loot=[TitaniumKatana][Grass,20][GoldPieces,500,80]]
Spawns a Werewolf at location 300,220,400.
When this Werewolf is killed, it has a 100% chance of dropping a TitaniumKatana, a 100% chance of dropping 20 Grass blocks and an 80% chance of dropping 500 gold pieces.
Specifying a count and percent for loot items is optional. If no count is specified, it will default to 1. If no percent is specified, it will default to 100.

MobSpawn [300,220,400] [Werewolf] [loot=[chance][Grass,20,50]]
Spawns a Werewolf at location 300,220,400.
When this Werewolf is killed, it has a 100% chance of dropping a chance item (standard random loot drop), and 50% chance of dropping 20 Grass blocks.

MobSpawn [300,220,400] [Werewolf] [loot=[100,200,300]]
Spawns a Werewolf at location 300,220,400.
When this Werewolf is killed, it will drop a random item picked from the storage block at [100,200,300].

MobSpawn [300,220,400] [Werewolf] [loot=[100,200,300][chance][Grass,20,50]]
Spawns a Werewolf at location 300,220,400.
When this Werewolf is killed, its loot is sourced from the storage block located at [100,200,300]. It has a 100% chance of dropping a random item picked from the storage block (specified by the [chance] item) and a 50% chance of dropping 20 Grass blocks picked from the storage block.
Items are removed from the storage block when dropped by the mob.
Sourcing loot from storage blocks is optional in the Creative game mode and mandatory in other game modes.
If no storage block exists at the location or the storage block is empty, the mob will not drop loot.

Teleport: Teleports entities.

Teleport [player] [x,y,z]
Teleport the player who activated the script to coordinates [x,y,z]. Relative coordinates are supported.

Teleport [x1,y1,z1] [x2,y2,z2] [x3,y3,z3] [absolute|relative]
Teleport all entities (players and mobs) inside the [x1,y1,z1] [x2,y2,z2] region to the coordinate [x3,y3,z3].

Entities will not be teleported if the destination contains solid blocks (otherwise theyd be stuck inside the block).

Examples:

Teleport [player] [300,201,400]
Teleport the player who activated the script to coordinate 300,201,400. Coordinates 300,201,400 and 300,202,400 must not contain solid blocks.

Teleport [0,1,0] [1023,511,1023] [512,201,512] [absolute]
Teleport all players and mobs in the world to coordinate 512,201,512.

Teleport [100,200,100] [150,201,150] [200,201,200] [relative]
Teleport all players and mobs inside the region [100,200,100] [150,201,150] to [200,201,200]. Each entities relative position to the minimum region corner [100,200,100] will be maintained at the destination. e.g. if the player is at location 110,201,120, they will be teleported to 210,201,220. (110-100,201-201,120-100) + (200,201,200).

SetText: Sets the text of blocks that have text properties. SetText works on Signs, NPCs and Books.

SetText [x,y,z] [text[gamertag]]
SetText [x,y,z] [text[gamertag]] [name]
SetText [x,y,z] [text[gamertag]] [page]

[x,y,z] - The coordinate of the block to set text for. For NPCs this is the coordinate of the NPCSpawner block.

[text[gamertag]] - The desired text. [gamertag] will be substituted with the gamertag of the player who activated the script and it can be placed anywhere within the text itself.

[name] - Indicates that [text] is to name the block. For NPCs [text] will be the NPCs name. For books [text] will be the book title. [name] is not used for sign blocks.

[page] - The page number of the book the text is for. Valid numbers are 1 - 1000. The [page] parameter is not used for NPCs or signs.

Examples:

SetText [100,200,300] [Welcome_to_Rohan]
Sets the text of the block at location 100,200,300. If the block is an NPCSpawner, this command sets the speech of the NPC. If the block is a Book, this command sets the text for page 1.

SetText [100,200,300] [Charlie] [name]
Sets the name of the block at location 100,200,300. If the block is an NPC, the NPC is named Charlie. If the block is a book, the books title is Charlie.

SetText [100,200,300] [Once upon a time] [2]
Sets the text for page 2 of a book at location 100,200,300.

SetTexture: Sets the texture for a block that has multiple texture capability. SetTexture can also be used to set a decal on a block that supports decals.

SetTexture [x,y,z] [id]

[x,y,z] - The coordinate of the block whose texture/decal you wish to set.

[id] - The zero based id number of the texture or decal. Valid values are 0 - 15. 0 = the default texture. id numbers go from bottom left (default texture) to top right as you see them on the lower section of the texture select screen. If the id used does not have a texture selected, the default is used.

Examples:

SetTexture [100,200,300] [4]
Sets the texture of the block located at 100,200,300 to the 4th selected texture for that block type.
Sets the decal of the block located at 100,200,300 to the 4th decal.

SetTexture [100,200,300] [0]
Sets the texture of the block located at 100,200,300 to the blocks default texture.
Removes any decal from the block located at 100,200,300.

Wait: Pauses the script execution for a time.

Wait [millisecs]

[millisecs] - The number of milliseconds the script should wait.

Examples:

Wait [1000] = wait 1 second.
Wait [100] = wait 1/10th of a second.
Wait [10000] = wait 10 seconds.
Wait [60000] = wait 1 minute.

Waypoint: Manipulates the player waypoint. A player can have only one waypoint at a time.

Waypoint [x,z]
Waypoint [delete]

[x,z] - The surface coordinate to set the waypoint.

[delete] - Delete rather than set the waypoint.

Examples:

Waypoint [300,200]
Sets the players waypoint at surface location 300,200.

Waypoint [delete]
Deletes the players waypoint.

Zone: Manipulates zones.
Zone [name] [delete]
Zone [name] [x,y,z] [x,y,z] [edit=on|off] [pvp=on|off] [fly=on|off] [mobs=on|off] [entry=script] [exit=script]

If: Begins a conditional query.

Conditional queries are used to execute different commands in the script based on the result of the query.

Example:

if
   query1
then
   command1
else
   command2
endif

The above script will execute command1 ONLY if query1 is true, otherwise it will execute ONLY command2. Only either command1 OR command2 are executed, not both.


if
   query1
then
   command1
elseif
   query2
then
   command2
else
   command3
endif

The above script executes command1 if query1 is true, otherwise it executes command2 if query2 is true, otherwise it executes command3.

CanEquip: Queries if the player who activated the script can use an item, based on the items skill requirement.

CanEquip [item] [true|false]

[item] - The item to query
[true|false] - The query. If this parameter is omitted, [true] is used.

Examples:

CanEquip [RubySword]
Returns true if the player has the required skill level to use a RubySword.

CanEquip [RubySword] [true]
Same as above.

CanEquip [RubySword] [false]
Returns true if the player does not have the required skill level to use a RubySword.

CanEquip [Marble]
Returns true if the player can place a marble block.

HasAction: Queries if the player has performed an action.

HasAction [item] [action] [true|false]
HasAction [item] [action] [compare] [qty]

[item] - The name of the item to query.
[action] - The type of action to query. Valid actions are Mined, Used, Crafted, Collected.

Examples:

HasAction [WoodSword] [crafted]
Returns true if the player has crafted at least one WoodSword.

HasAction [WoodSword] [crafted] [>] [10]
Returns true if the player has crafted more than 10 WoodSwords.

HasAction [Clay] [mined] [>] [100]
Returns true if the player has mined more than 100 Clay.

HasAction [Limestone] [used] [<] [50]
Returns true if the player has placed less than 50 Limestone.

HasHistory: Queries historical records.

HasHistory [name] [player|clan] [true|false]
HasHistory [name] [player|clan] [compare] [count]

[player] - Query player history.
[clan] - Query the players clan history.
Omit these to query system history.

Examples:

HasHistory [Sample]
HasHistory [Sample] [true]
Returns true if system Sample history is not equal to zero.

HasHistory [Sample] [false]
Returns true if there is no system Sample history or it equals zero.

HasHistory [Sample] [player]
HasHistory [Sample] [player] [true]
Returns true if the Sample history for the player is not equal to zero.

HasHistory [Sample] [clan]
HasHistory [Sample] [clan] [true]
Returns true if the Sample history for the players clan is not equal to zero.

HasHistory [Sample] [clan] [>=] [10]
Returns true if the Sample history for the players clan is greater than or equal to 10.

HasHistory [Sample] [player] [<=] [10]
Returns true if the Sample history for the player is less than or equal to 10.

HasHistory [Sample] [=] [10]
Returns true if the system Sample history equals 10.


System generated records:

BookRead\xxx
xxx = the books title. This player record is generated/incremented when you read a book.
example: HasHistory [BookRead\Golems Lore] [player] [true]

NPCTalk\xxx
xxx = Name of NPC. This player record is generated/incremented when you talk to an NPC
example: HasHistory [NPCTalk\John The Elf] [player] [>] [4]

Note: History names support folders so you can use \ in your history names to create logical folders of history.

HasInventory: Queries block or entity inventories.
HasInventory [x,y,z] [item] [true|false]
HasInventory [player] [item] [true|false]
HasInventory [x,y,z] [item] [compare] [count]
HasInventory [player] [item] [compare] [count]

HasMarker: Queries map markers.
HasMarker [name] [true|false]

HasPermission: Queries player permissions.

HasPermission [permission] [true|false]

Valid permissions:
Adventure, Edit, Creative, Fly, Map, VoiceChat, TextChat, Spectate, Shops, ViewScripts, Grief, Save, Admin.

HasSkill: Queries player skill levels.
HasSkill [skill] [compare] [level]

IsAvatar: Queries what skin the player is currently wearing.
IsAvatar [avatar] [true|false]

IsBlock: Queries the block id at a location.

IsBlock [x,y,z] [block] [aux] [true|false]

Examples:

IsBlock [150,200,300] [Basalt]
IsBlock [150,200,300] [Basalt] [true]
Returns true if the block at location 150,200,300 is Basalt.

IsBlock [150,200,300] [Basalt] [false]
Returns true if the block at location 150,200,300 is not Basalt.

IsBlock [150,200,300] [Ramp] [3]
IsBlock [150,200,300] [Ramp] [3] [true]
Returns true if the block at location 150,200,300 is a Ramp AND the associated Aux data equals 3.

IsBlock [150,200,300] [Ramp] [3] [false]
Returns true if the block at location 150,200,300 is not a Ramp OR the associated Aux data is not equal to 3.

IsCombat: Queries if combat is enabled.
IsCombat [true|false]

IsDistance: Queries the distance between the player and a location.
IsDistance [x,y,z] [compare] [distance]

IsFiniteResources: Queries if Finite Resources is enabled.
IsFiniteResources [true|false]

IsPowered: Queries if a block is powered.
IsPowered [x,y,z] [true|false]

IsSkills: Queries if the skill system is enabled.
IsSkills [true|false]

IsRandom: Allows a randomized conditional.

IsRandom [x,y]

[x,y] - X chances in Y.

Examples:

IsRandom [1,2]
Has 1 chance in 2 (50%) of returning true.

IsRandom [3,10]
Has 3 chances in 10 (30%) of returning true.

IsRandom [34,100]
Has 34 chances in 100 (34%) of returning true.

IsRandom [1,1000]
Has 1 chance in 1000 (0.1%) of returning true.

if
   IsRandom [1,3]
then
   Notify [Well done]
else
   Notify [Bad Luck]

The following script will have a 1 in 3 chance of notifying "Well Done" otherwise it will notify "Bad Luck"

IsTime: Queries the current game or player time.
IsTime [compare] [seconds]
IsTime [player] [compare] [seconds]

Then: Marks which commands are executed if the queries are true.

Elseif: Allows multiple query branches.

Else: Marks which commands are executed if the queries are false.

Endif: Ends an If, Then, Else, Elseif block.

MessageBox: Prompt gamer with multiple options.

MessageBox [nocancel] [text] [a=[text][script][x,y,z]] [x=[text][script][x,y,z]] [y=[text][script][x,y,z]]

[nocancel] - Omit the default B = Exit option.
[text] - Message.

If coordinates are omitted, a default of [rel:0,0,0] is used.
[x,y,z] Absolute coordinate offset for the executed script.
[rel:x,y,z] Relative coords are only supported if the script is executed from a script block.

Examples:

MessageBox [Hello [gamertag]] [a=[Lets do this][ScriptA]] [x=[Lets do that][ScriptX]] [y=[Lets do something else][ScriptY]]

This will prompt the Gamer with a message box like so:

----------------------------
Hello [Gamer]

A  Lets do this
X  Lets do that
Y  Lets do something else
B  Exit
----------------------------

If the gamer presses A, ScriptA will be executed and the message box is closed.
If the gamer presses X, ScriptX will be executed and the message box is closed.
If the gamer presses Y, ScriptY will be executed and the message box is closed.
If the gamer presses B, the message box is closed and no script is executed.


Note:
MessageBox [Hello [gamertag]] [a=[Lets do this][ScriptA]]
and
MessageBox [Hello [gamertag]] [a=[Lets do this][ScriptA][rel:0,0,0]]
are identical.

SkyColor: Customize the color of the sky.

SkyColor [r,g,b|delete] [intensity] [time] [player]

[r,g,b|delete] - The custom color or 'delete' to remove a previous custom color.

[intensity] - The intensity of the color as a percentage (0 - 100%).

[time] - The time to transition to the color, specified in milliseconds. If this parameter is omitted a default value of 3000 (3 seconds) is used. If a time of 0 (zero) is used, the transition is instant.

[player] - Add this parameter to specify the color will only be applied to the player who executed the script, omit the parameter to apply the color to all players.

Restrictions:
There are some restrictions with dramatic rapid color changes in order to remove the possibility of seizure causing color changes.

Examples:

SkyColor [100,200,250] [70] [2000]
Sets the sky color to r=100,g=200,b=250 using an intensity of 70%. All players will see this effect. The effect will transition over a 2 second period.

SkyColor [100,200,250] [player]
Sets the sky color to r=100,g=200,b=250 using an intensity of 100%. Only the player who executed the script will see the effect. The color will transition over 3 seconds.

SkyColor [delete] [1000]
Removes any previous custom sky color. The color will transition off over 1 second.

Menu: Prompt gamer with multiple choice menu items.

Menu [[text][script][x,y,z]] [[text][script][x,y,z]] [[text][script][x,y,z]] ...

If coordinates are omitted, a default of [rel:0,0,0] is used.
[x,y,z] Absolute coordinate offset for the executed script.
[rel:x,y,z] Relative coords are only supported if the script is executed from a script block.

Examples:

Menu [[Option 1][Script1]] [[Option 2][Script2]] [[Option 3][Script3]]

This will prompt the Gamer with a menu like so:

-------------
Option 1
Option 2
Option 3
Cancel
-------------

If Option 1 is selected by the gamer, Script1 will be executed.
If Option 2 is selected by the gamer, Script2 will be executed.
If Option 3 is selected by the gamer, Script3 will be executed.


Note:
Menu [[Option 1][Script1]] [[Option 2][Script2]]
and
Menu [[Option 1][Script1][rel:0,0,0]] [[Option 2][Script2][rel:0,0,0]]
are identical.

Skill: Sets a players skill level.

Skill [name] [level]

[name] - The name of the skill.
[level] - The level to set the skill to. You cannot set a players skill level higher than 99.

Restrictions
This command is only executed on worlds using Local Skills.

Examples:

Skill [Attack] [10]
Sets the players Attack skill to level 10.

Skill [Mining] [25]
Sets the players Mining skill to level 25.

SkillAddXP: Add XP to a players skill level.

SkillAddXP [name] [xp]

[name] - The name of the skill.
[xp] - The amount of XP to add to the skill.

Restrictions:
This command is only executed on worlds using Local Skills.

Examples:

SkillAddXP [Attack] [1000]
Adds 1000 XP to the players Attack skill.

TintColor: Applies a multiplicative tint color to the texture pack. When a TintColor command is executed, it replaces any active Tint.

TintColor [r,g,b|delete] [transition] [player]

[r,g,b|delete] - The tint factor or 'delete' to remove the current tint.

Tints are multiplicative factors applied to the pixel colors on your screen. Each tint component is specified as a percentage. A percentage < 100 will reduce the corresponding color component in the pixel. A percentage > 100 will increase the color component, and a percentage of 100 will leave the corresponding color component of the pixel unchanged.

e.g. if you specify a tint of [50, 200, 25], and the pixel color is [128, 128, 128] (gray), then the final color will be [64, 256, 32] = which is a greenish tint with a small amount of red and even smaller amount of blue. The closer the tint value is to 100, the less effect (intensity) it has on the final color.

[transition] - The time to transition the tint on (fade it in), specified in milliseconds. If this parameter is omitted a default value of 3000 (3 seconds) is used. If a value of 0 (zero) is used, the transition is instant.

[player] - If this parameter is included, only the player who executed the script will see the tint, otherwise all players will see it.

Restrictions:
There are some restrictions with dramatic rapid color changes in order to remove the possibility of seizure causing color changes.

Examples:

TintColor [50, 200, 25]
The final color after this tint factor is applied will be 1/2 of the pixels red component, twice the green component, and 1/4 of the blue component, which will cause a mostly greenish tint for most colors. All players will see the tint. The tint will transition on over 3 seconds.

TintColor [150, 100, 100] [player]
The final color after this tint factor is applied will be 1.5 x the red component. The green and blue components remain unchanged. Only the player who executed the script will see the tint. The tint will transition on over 3 seconds.

TintColor [10, 0, 200] [player] [2000]
The final color after this tint factor is applied is 1/10 of the red component, zero green component and twice the blue component which will usually cause a strong blue tint. Only the player who executed the script will see the tint. The tint will transition on over 2 seconds.

TintColor [delete] [1000]
Removes the current tint. The tint will transition off over 1 second.",
